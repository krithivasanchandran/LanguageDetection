package com.locdata.geocoding.google.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Date;
import java.util.List;
import java.util.Set;

import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.locdata.geocoding.google.service.GeoCodingJsonResponse.Result;
import com.locdata.scraper.main.ScraperLogic;

/*
 * https://developers.google.com/maps/documentation/geocoding/intro
 * URLs must be properly encoded to be valid and are limited to 8192 characters for all web services. 
 * Be aware of this limit when constructing your URLs.
 * Note that different browsers, proxies, and servers may have different URL character limits as well.
 * 
 * Input -> address , api key
 * 
 * Output : County name : administrative_area_level_2
 * 
 * 
 */

public class GeoCodingApi {
	
	private static final String geocoding = "https://maps.googleapis.com/maps/api/geocode/json?address=";
	private static final String secureapikey = "&key=AIzaSyCdP9jGPN2qTmxtpV9rBkJI2zPpRsp2E-c";
	
	private String constructgeourl;
	
	public GeoCodingApi(String address) throws UnsupportedEncodingException{
		if(address.length() < 8192){
			address = address.replaceAll("\\s+", "+");
			this.constructgeourl = geocoding.concat(URLEncoder.encode(address, "UTF-8")).concat(secureapikey);
			System.out.println("Constructed geo code API =====> " + this.constructgeourl);
		}
	}
	
	
	public String fireGeoCodeApi(){

		try{
			
			URL url = new URL(this.constructgeourl);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET");
			conn.setRequestProperty("Accept", "application/json");
			StringBuilder builder = new StringBuilder();
					
			if (conn.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ conn.getResponseCode());
			}

			BufferedReader br = new BufferedReader(new InputStreamReader(
					(conn.getInputStream())));

				String output;
				System.out.println("Output from Server .... \n");
				while ((output = br.readLine()) != null) {
					builder.append(output);
				}

				conn.disconnect();
				return builder.toString();
			
		}catch(MalformedURLException malformedexception) {
			
			System.out.println(malformedexception.getMessage() + "On Error " + ScraperLogic.class.getSimpleName() + " ::: request URL is not a HTTP or HTTPS URL");
            
		}catch (IOException e) {
			
            System.out.println(e.getMessage() + "On Error " + ScraperLogic.class.getSimpleName() + " ::: IOException on URL fetch" + new Date().toString());
		}
		return null;
	}
	
	public void extractJsonEntities(String jsonResponse, Set<GeoCodeEntityCarrierToExcelWriter> keyDataSet) throws JsonParseException, JsonMappingException, IOException{
		
		ObjectMapper mapper = new ObjectMapper();
		GeoCodingJsonResponse georesponse = mapper.readValue(jsonResponse, GeoCodingJsonResponse.class);
		/*
		 * Result could have just one array value 
		 */
		Result result = georesponse.getResults().get(0);
		GeoCodeEntityCarrierToExcelWriter pojo = new GeoCodeEntityCarrierToExcelWriter();
		/*
		 * Writing data from json to pojo 
		 */
		 pojo.setAddress(result.getFormattedAddress());
		 pojo.setLatitude(result.getGeometry().getLocation().getLat());
		 pojo.setLongitude(result.getGeometry().getLocation().getLng());
		 pojo.setLocationtype(result.getGeometry().getLocationType());
		 
		
		        	        if(GeoCodingStatusCodes.getErrorCodes().contains(georesponse.getStatus().trim())){
		        	        	String str = georesponse.getStatus().trim();
		        	        	System.out.println( " Ennum response  " + GeoCodingStatusCodes.valueOf(str).name());
		        	        	
		        	        	List<String> types = result.getTypes();
		        	        	
		        	        	for(int j=0;j<types.size();j++){
		        	        		
		        	        		switch(types.get(j)){
		        	        		
		        	        		case "administrative_area_level_1":
		        	        			final String state = result.getAddressComponents().get(j).getLongName();
		        	        			pojo.setState(state != null || state.isEmpty() ? state : " ");
		        	        			break;
		        	        		
		        	        		case "administrative_area_level_2":
		        	        			final String countyname = result.getAddressComponents().get(j).getLongName();
		        	        			pojo.setCounty(countyname!=null || countyname.isEmpty() ? countyname : " ");
		        	        			break;
		        	        			
		        	        		case "locality":
		        	        			final String city = result.getAddressComponents().get(j).getLongName();
		        	        			pojo.setCity(city != null || city.isEmpty() ? city : " ");
		        	        			break;
		        	        		
		        	        		case "country":
		        	        			final String country = result.getAddressComponents().get(j).getLongName();
		        	        			fianl String countryCode =  result.getAddressComponents().get(j).getShortName();
		        	        			pojo.setCountry(country != null || country.isEmpty() ? country : " ");
		        	        			pojo.setCountryCode(countryCode != null || country.isEmpty() ? country : " ");
		        	        			break;
		        	        		
		        	        		case "postal_code":
		        	        			String zipcode = result.getAddressComponents().get(j).getLongName();
		        	        			pojo.setZipcode(zipcode != null || zipcode.isEmpty() ? zipcode : " ");
		        	        			break;
		        	        		}
		        	        		
		        	        	}
		        	        	
		        	        	 System.out.println( " formatted Json response " +  result.getFormattedAddress());
				        	        System.out.println( " latitude :: " + result.getGeometry().getLocation().getLat());
				        	        System.out.println( " longitude :: " + result.getGeometry().getLocation().getLng());
				        	        System.out.println( " location_type :: " + result.getGeometry().getLocationType());
				        	        System.out.println(" Place Id ::: " + result.getPlaceId());
				        	        System.out.println(" Status ::: " + georesponse.getStatus());
		        	        } 
	}
}