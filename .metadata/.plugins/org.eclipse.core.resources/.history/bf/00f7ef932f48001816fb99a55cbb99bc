package com.dataruvi.automotive.carrentals;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import com.google.i18n.phonenumbers.PhoneNumberMatch;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.locdata.geocoding.google.service.GeoCodeEntityCarrierToExcelWriter;
import com.locdata.scraper.main.ScraperLogic;
import com.locdata.utils.common.CommonUtils;

import redis.clients.jedis.Jedis;

public class EnterpriseCarRentals {

	final static Set<String> parentPageSeed = new HashSet<String>();
	final static Set<String> secondaryPageSeedState = new HashSet<String>();

	public static void main(String args[]) throws EncryptedDocumentException, InvalidFormatException, IOException,
			InterruptedException, InstantiationException, IllegalAccessException {

		String parentUrl = "https://www.enterprise.com/en/car-rental/locations/us.html?icid=header.locations.rental-_-us.locations-_-ENUS.NULL";
		String root = "https://www.enterprise.com";
		final String country = "US";

		Document doc = ScraperLogic.Scraper.fetchHtmlContents(parentUrl);
		CommonUtils.checkDoc(doc, EnterpriseCarRentals.class);

		doc.select(".state-list").forEach((t) -> {
			t.select(".cf.state-level-item").forEach((m) -> {
				m.select("h3").forEach((j) -> {
					String url = j.select("a").attr("href");
					url = root.concat(url);
					System.out.println(" URls -----------> " + url);
					parentPageSeed.add(url);
				});
			});
		});

		System.out.println(" Size of the url list is " + parentPageSeed.size());

		parentPageSeed.forEach((z) -> {

			System.out.println(" Now Crawling Seed !! ---------> " + z);

			// Fetch the headers:
			Document docs = ScraperLogic.Scraper.fetchHtmlContents(z);
			CommonUtils.checkDoc(docs, EnterpriseCarRentals.class);

			docs.select(".en_us.statepage").forEach((v) -> {
					v.select(".band.location-band.region-list").forEach((m) -> {
						m.select(".cf").forEach((act) -> {
							if(!act.select("h2").text().equalsIgnoreCase("Top Cities")){
								act.select("ul").forEach((a1) -> {
									a1.select("li").forEach((n) -> {
										String heading = n.select("a").attr("href");
										System.out.println(" SubPAge SEEDS BASED ON STATE IS -----------> " + heading);
										secondaryPageSeedState.add(heading);
									});
								});
							}else{
								System.out.println(" Ignored Crawl under Top cities to avoid more redundant sublinks extraction");
							}
						});
					});	
			});
			return;
		});
		
		System.out.println(" Total locations in us is " + secondaryPageSeedState.size());
		
		Jedis jedis = new Jedis("localhost");
		System.out.println("Connection to server sucessfully"); 
	    System.out.println("Server is running: "+jedis.ping()); 
	    
	    if(jedis.ping().equalsIgnoreCase("PONG")){
	    	
	    	for(String writeexternal : secondaryPageSeedState){
			      // Right pushing and storing all the data in redis and then hitting the server one by one
			      jedis.rpush("enterpriserental", writeexternal);
			}
	    }
	    secondaryPageSeedState.clear();
	    String str;
	    while((str = jedis.lpop("enterpriserental")) != null){
	    	String d = str;
	    	Thread.sleep(2000);
			Document yd = ScraperLogic.Scraper.fetchHtmlContents(d);
			CommonUtils.checkDoc(yd, EnterpriseCarRentals.class);

			if (yd != null) {
				yd.select(".cf.booking-widget").forEach((p) -> {
					
					final GeoCodeEntityCarrierToExcelWriter enterpriseCarRental = new GeoCodeEntityCarrierToExcelWriter();

					String address = p.select(".street").text();
					System.out.println(" Address name  ---------------> " + address);
					enterpriseCarRental.setAddress(address);

					PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
					
					PhoneNumberMatch itr = phoneUtil.findNumbers(address, country).iterator().next();
					String phone = (String) address.subSequence(itr.start(), itr.end());
					System.out.println(" Phone information --------------------> " + phone);
//					enterpriseCarRental.setPhoneNumber(phone);

					

					String storename = p.select(".left").text();
					System.out.println(" storename  ---------------> " + storename);
					enterpriseCarRental.setStorename(storename);
			//		avisCarRentalsKeyDataSet.add(avisCarRental);
				});
			
			  yd.select(".band.breadcrumb-band.location-breadcrumbs").forEach((re) -> {
				  String storehours = p.select(".location-availability").text();
					System.out.println(" Hours  ---------------> " + storehours);
					enterpriseCarRental.setStoreHours(storehours);
			  });
			}
	    }
	    

	}
}